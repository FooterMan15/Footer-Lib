plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id 'me.shedaniel.unified-publishing'
}

architectury {
    platformSetupLoomIde()
    forge()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath

    forge {
        convertAccessWideners = true
        extraAccessWideners.add loom.accessWidenerPath.get().asFile.name
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin since it *excludes* files.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

dependencies {
    forge "net.minecraftforge:forge:${rootProject.forge_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }
}

processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

unifiedPublishing {
    project {
        gameVersions = [rootProject.minecraft_version]
        gameLoaders = ["forge"]
        displayName = "$mod_name Forge $project.version"
        changelog = rootProject.file("changelog.md").text
        mainPublication remapJar

        if(env.isPresent("MR_TOK")) {
            modrinth {
                token = env.fetch("MR_TOK")
                id = project.mr_id
                version = "$project.version+$project.name"
            }
        }
        if(env.isPresent("CF_TOK")) {
            curseforge {
                token = env.fetch("CF_TOK")
                id = project.cf_id
            }
        }
    }
}